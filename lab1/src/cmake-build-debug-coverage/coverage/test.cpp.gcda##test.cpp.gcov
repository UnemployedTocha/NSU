        -:    0:Source:C:/Users/Pepega/CLionProjects/NewLab1/test.cpp
        -:    0:Graph:C:\Users\Pepega\CLionProjects\NewLab1\cmake-build-debug-coverage\CMakeFiles\NewLab1.dir\test.cpp.gcno
        -:    0:Data:C:\Users\Pepega\CLionProjects\NewLab1\cmake-build-debug-coverage\CMakeFiles\NewLab1.dir\test.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "HashTable.h"
        -:    2:#include <gtest/gtest.h>
        -:    3:
        4:    4:TEST(TestValue, Equality){
        1:    5:    Value A(10, 24);
        1:    6:    Value B(10, 24);
       1*:    7:    EXPECT_EQ(A == B, true);
        -:    8:
        1:    9:    Value C;
        1:   10:    Value D(0, 0);
       1*:   11:    EXPECT_EQ(C == D, true);
       1*:   12:    EXPECT_EQ(A == D, false);
        1:   13:}
------------------
_ZN23TestValue_Equality_TestC1Ev:
function _ZN23TestValue_Equality_TestC1Ev called 1 returned 100% blocks executed 100%
        1:    4:TEST(TestValue, Equality){
        1:    4-block  0
call    0 returned 1
------------------
_ZN23TestValue_Equality_TestD0Ev:
function _ZN23TestValue_Equality_TestD0Ev called 1 returned 100% blocks executed 100%
        1:    4:TEST(TestValue, Equality){
        1:    4-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN23TestValue_Equality_TestD1Ev:
function _ZN23TestValue_Equality_TestD1Ev called 1 returned 100% blocks executed 100%
        1:    4:TEST(TestValue, Equality){
        1:    4-block  0
call    0 returned 1
------------------
_ZN23TestValue_Equality_Test8TestBodyEv:
function _ZN23TestValue_Equality_Test8TestBodyEv called 1 returned 100% blocks executed 26%
        1:    4:TEST(TestValue, Equality){
        1:    5:    Value A(10, 24);
        1:    5-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:    6:    Value B(10, 24);
        1:    6-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:    7:    EXPECT_EQ(A == B, true);
        1:    7-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:    7-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:    7-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:    7-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:    7-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:    7-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:    7-block  6
call   19 never executed
call   20 never executed
        1:    7-block  7
call   21 returned 1
    $$$$$:    7-block  8
    $$$$$:    7-block  9
    $$$$$:    7-block 10
call   22 never executed
    $$$$$:    7-block 11
    $$$$$:    7-block 12
call   23 never executed
    $$$$$:    7-block 13
    $$$$$:    7-block 14
call   24 never executed
        -:    8:
        1:    9:    Value C;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   10:    Value D(0, 0);
        1:   10-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   11:    EXPECT_EQ(C == D, true);
        1:   11-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   11-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   11-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   11-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:   11-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   11-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:   11-block  6
call   19 never executed
call   20 never executed
        1:   11-block  7
call   21 returned 1
    $$$$$:   11-block  8
    $$$$$:   11-block  9
    $$$$$:   11-block 10
call   22 never executed
    $$$$$:   11-block 11
    $$$$$:   11-block 12
call   23 never executed
    $$$$$:   11-block 13
    $$$$$:   11-block 14
call   24 never executed
       1*:   12:    EXPECT_EQ(A == D, false);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   12-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   12-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   12-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:   12-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   12-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:   12-block  5
call   19 never executed
call   20 never executed
        1:   12-block  6
call   21 returned 1
    $$$$$:   12-block  7
    $$$$$:   12-block  8
    $$$$$:   12-block  9
call   22 never executed
    $$$$$:   12-block 10
    $$$$$:   12-block 11
call   23 never executed
    $$$$$:   12-block 12
    $$$$$:   12-block 13
call   24 never executed
        1:   13:}
------------------
        4:   14:TEST(TestList, OperatorEquality){
        2:   15:    List A;
        1:   16:    Value data;
        -:   17:
     1001:   18:    for(size_t i = 0; i < 1000; ++i){
     2000:   19:        std::string key = std::to_string(i);
     1000:   20:        A.Push(key, data);
        -:   21:    }
        2:   22:    List B;
        1:   23:    B = A;
        -:   24:
       1*:   25:    EXPECT_EQ(A, B);
       1*:   26:    EXPECT_EQ(B, A);
        -:   27:
        1:   28:    A = A;
       1*:   29:    EXPECT_EQ(A, A);
        -:   30:
        1:   31:    A.Push("qwerty", data);
       1*:   32:    EXPECT_NE(A, B);
        1:   33:}
------------------
_ZN30TestList_OperatorEquality_TestC1Ev:
function _ZN30TestList_OperatorEquality_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   14:TEST(TestList, OperatorEquality){
        1:   14-block  0
call    0 returned 1
------------------
_ZN30TestList_OperatorEquality_TestD0Ev:
function _ZN30TestList_OperatorEquality_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   14:TEST(TestList, OperatorEquality){
        1:   14-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN30TestList_OperatorEquality_TestD1Ev:
function _ZN30TestList_OperatorEquality_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   14:TEST(TestList, OperatorEquality){
        1:   14-block  0
call    0 returned 1
------------------
_ZN30TestList_OperatorEquality_Test8TestBodyEv:
function _ZN30TestList_OperatorEquality_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1:   14:TEST(TestList, OperatorEquality){
        2:   15:    List A;
        1:   15-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   15-block  1
call    4 never executed
        1:   16:    Value data;
        1:   16-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   17:
     1001:   18:    for(size_t i = 0; i < 1000; ++i){
        1:   18-block  0
     1001:   18-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     2000:   19:        std::string key = std::to_string(i);
     1000:   19-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:   19-block  1
call    3 returned 1000
    $$$$$:   19-block  2
call    4 never executed
     1000:   20:        A.Push(key, data);
     1000:   20-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
        -:   21:    }
        2:   22:    List B;
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   22-block  1
call    4 never executed
        1:   23:    B = A;
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   24:
       1*:   25:    EXPECT_EQ(A, B);
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   25-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   25-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   25-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   25-block  5
call   16 never executed
call   17 never executed
        1:   25-block  6
call   18 returned 1
    $$$$$:   25-block  7
call   19 never executed
    $$$$$:   25-block  8
    $$$$$:   25-block  9
call   20 never executed
    $$$$$:   25-block 10
    $$$$$:   25-block 11
call   21 never executed
       1*:   26:    EXPECT_EQ(B, A);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   26-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   26-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   26-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   26-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   26-block  4
call   16 never executed
call   17 never executed
        1:   26-block  5
call   18 returned 1
    $$$$$:   26-block  6
call   19 never executed
    $$$$$:   26-block  7
    $$$$$:   26-block  8
call   20 never executed
    $$$$$:   26-block  9
    $$$$$:   26-block 10
call   21 never executed
        -:   27:
        1:   28:    A = A;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   29:    EXPECT_EQ(A, A);
        1:   29-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   29-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   29-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   29-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   29-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   29-block  5
call   16 never executed
call   17 never executed
        1:   29-block  6
call   18 returned 1
    $$$$$:   29-block  7
call   19 never executed
    $$$$$:   29-block  8
    $$$$$:   29-block  9
call   20 never executed
    $$$$$:   29-block 10
    $$$$$:   29-block 11
call   21 never executed
        -:   30:
        1:   31:    A.Push("qwerty", data);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   31-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   31-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   31-block  2
call    9 never executed
    $$$$$:   31-block  3
    $$$$$:   31-block  4
call   10 never executed
    $$$$$:   31-block  5
       1*:   32:    EXPECT_NE(A, B);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   32-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   32-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   32-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   32-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   32-block  4
call   16 never executed
call   17 never executed
        1:   32-block  5
call   18 returned 1
    $$$$$:   32-block  6
call   19 never executed
    $$$$$:   32-block  7
    $$$$$:   32-block  8
call   20 never executed
    $$$$$:   32-block  9
    $$$$$:   32-block 10
call   21 never executed
        1:   33:}
------------------
        -:   34:
        -:   35:
        4:   36:TEST(TestHashTable, Constructors){
        2:   37:    HashTable A;
     1001:   38:    for(size_t i = 0; i < 1000; ++i){
     1000:   39:        Value data;
     2000:   40:        std::string key = std::to_string(i);
     1000:   41:        A.Insert(key, data);
        -:   42:    }
        2:   43:    HashTable B = A;
        -:   44:
       1*:   45:    EXPECT_EQ(A, B);
       1*:   46:    EXPECT_EQ(B, A);
        -:   47:
        1:   48:}
------------------
_ZN31TestHashTable_Constructors_TestC1Ev:
function _ZN31TestHashTable_Constructors_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   36:TEST(TestHashTable, Constructors){
        1:   36-block  0
call    0 returned 1
------------------
_ZN31TestHashTable_Constructors_TestD0Ev:
function _ZN31TestHashTable_Constructors_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   36:TEST(TestHashTable, Constructors){
        1:   36-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN31TestHashTable_Constructors_TestD1Ev:
function _ZN31TestHashTable_Constructors_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   36:TEST(TestHashTable, Constructors){
        1:   36-block  0
call    0 returned 1
------------------
_ZN31TestHashTable_Constructors_Test8TestBodyEv:
function _ZN31TestHashTable_Constructors_Test8TestBodyEv called 1 returned 100% blocks executed 35%
        1:   36:TEST(TestHashTable, Constructors){
        2:   37:    HashTable A;
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   37-block  1
call    4 never executed
     1001:   38:    for(size_t i = 0; i < 1000; ++i){
        1:   38-block  0
     1001:   38-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:   39:        Value data;
     1000:   39-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:   40:        std::string key = std::to_string(i);
     1000:   40-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:   40-block  1
call    3 returned 1000
    $$$$$:   40-block  2
call    4 never executed
     1000:   41:        A.Insert(key, data);
     1000:   41-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
        -:   42:    }
        2:   43:    HashTable B = A;
        1:   43-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   43-block  1
call    4 never executed
        -:   44:
       1*:   45:    EXPECT_EQ(A, B);
        1:   45-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   45-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   45-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   45-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   45-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   45-block  5
call   16 never executed
call   17 never executed
        1:   45-block  6
call   18 returned 1
    $$$$$:   45-block  7
call   19 never executed
    $$$$$:   45-block  8
    $$$$$:   45-block  9
call   20 never executed
    $$$$$:   45-block 10
    $$$$$:   45-block 11
call   21 never executed
       1*:   46:    EXPECT_EQ(B, A);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   46-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   46-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   46-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   46-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   46-block  4
call   16 never executed
call   17 never executed
        1:   46-block  5
call   18 returned 1
    $$$$$:   46-block  6
call   19 never executed
    $$$$$:   46-block  7
    $$$$$:   46-block  8
call   20 never executed
    $$$$$:   46-block  9
    $$$$$:   46-block 10
call   21 never executed
        -:   47:
        1:   48:}
------------------
        -:   49:
        4:   50:TEST(TestHashTable, Insert) {
        2:   51:    HashTable A;
        -:   52:
     1001:   53:    for (size_t i = 0; i < 1000; ++i) {
     1000:   54:        Value data(12, 38);
     2000:   55:        std::string key = std::to_string(i);
     1000:   56:        A.Insert(key, data);
    1000*:   57:        EXPECT_FALSE(A.Insert(key, data));
        -:   58:    }
        1:   59:    A.Clear();
     1001:   60:    for (size_t i = 0; i < 1000; ++i) {
     1000:   61:        Value Data;
     2000:   62:        std::string key = std::to_string(i);
    1000*:   63:        EXPECT_TRUE(A.Insert(key, Data));
        -:   64:    }
        -:   65:
        2:   66:    HashTable B;
        1:   67:    B = A;
     1001:   68:    for (size_t i = 0; i < 1000; ++i) {
     1000:   69:        Value data;
     2000:   70:        std::string key = std::to_string(i);
    1000*:   71:        EXPECT_FALSE(B.Insert(key, data));
        -:   72:    }
        -:   73:
     1001:   74:    for (size_t i = 0; i < 1000; ++i) {
    1000*:   75:        EXPECT_TRUE(B.Contains(std::to_string(i)));
        -:   76:    }
        1:   77:}
------------------
_ZN25TestHashTable_Insert_TestC1Ev:
function _ZN25TestHashTable_Insert_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   50:TEST(TestHashTable, Insert) {
        1:   50-block  0
call    0 returned 1
------------------
_ZN25TestHashTable_Insert_TestD0Ev:
function _ZN25TestHashTable_Insert_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   50:TEST(TestHashTable, Insert) {
        1:   50-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN25TestHashTable_Insert_TestD1Ev:
function _ZN25TestHashTable_Insert_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   50:TEST(TestHashTable, Insert) {
        1:   50-block  0
call    0 returned 1
------------------
_ZN25TestHashTable_Insert_Test8TestBodyEv:
function _ZN25TestHashTable_Insert_Test8TestBodyEv called 1 returned 100% blocks executed 34%
        1:   50:TEST(TestHashTable, Insert) {
        2:   51:    HashTable A;
        1:   51-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   51-block  1
call    4 never executed
        -:   52:
     1001:   53:    for (size_t i = 0; i < 1000; ++i) {
        1:   53-block  0
     1001:   53-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:   54:        Value data(12, 38);
     1000:   54-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:   55:        std::string key = std::to_string(i);
     1000:   55-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:   55-block  1
call    4 never executed
     1000:   56:        A.Insert(key, data);
     1000:   56-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
    1000*:   57:        EXPECT_FALSE(A.Insert(key, data));
     1000:   57-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:   57-block  1
call    3 returned 1000
call    4 returned 1000
branch  5 taken 0 (fallthrough)
branch  6 taken 1000
    %%%%%:   57-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   57-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   57-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   57-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:   57-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     1000:   57-block  7
call   23 returned 1000
    $$$$$:   57-block  8
call   24 never executed
    $$$$$:   57-block  9
    $$$$$:   57-block 10
call   25 never executed
    $$$$$:   57-block 11
    $$$$$:   57-block 12
call   26 never executed
    $$$$$:   57-block 13
    $$$$$:   57-block 14
call   27 never executed
        -:   58:    }
        1:   59:    A.Clear();
        1:   59-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
     1001:   60:    for (size_t i = 0; i < 1000; ++i) {
        1:   60-block  0
     1001:   60-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:   61:        Value Data;
     1000:   61-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:   62:        std::string key = std::to_string(i);
     1000:   62-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:   62-block  1
call    4 never executed
    1000*:   63:        EXPECT_TRUE(A.Insert(key, Data));
     1000:   63-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:   63-block  1
call    3 returned 1000
call    4 returned 1000
branch  5 taken 0 (fallthrough)
branch  6 taken 1000
    %%%%%:   63-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   63-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   63-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   63-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:   63-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     1000:   63-block  7
call   23 returned 1000
    $$$$$:   63-block  8
call   24 never executed
    $$$$$:   63-block  9
    $$$$$:   63-block 10
call   25 never executed
    $$$$$:   63-block 11
    $$$$$:   63-block 12
call   26 never executed
    $$$$$:   63-block 13
    $$$$$:   63-block 14
call   27 never executed
        -:   64:    }
        -:   65:
        2:   66:    HashTable B;
        1:   66-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   66-block  1
call    3 returned 1
    $$$$$:   66-block  2
call    4 never executed
        1:   67:    B = A;
        1:   67-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
     1001:   68:    for (size_t i = 0; i < 1000; ++i) {
        1:   68-block  0
     1001:   68-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:   69:        Value data;
     1000:   69-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:   70:        std::string key = std::to_string(i);
     1000:   70-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:   70-block  1
call    4 never executed
    1000*:   71:        EXPECT_FALSE(B.Insert(key, data));
     1000:   71-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:   71-block  1
call    3 returned 1000
call    4 returned 1000
branch  5 taken 0 (fallthrough)
branch  6 taken 1000
    %%%%%:   71-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   71-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   71-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   71-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:   71-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     1000:   71-block  7
call   23 returned 1000
    $$$$$:   71-block  8
call   24 never executed
    $$$$$:   71-block  9
    $$$$$:   71-block 10
call   25 never executed
    $$$$$:   71-block 11
    $$$$$:   71-block 12
call   26 never executed
    $$$$$:   71-block 13
    $$$$$:   71-block 14
call   27 never executed
        -:   72:    }
        -:   73:
     1001:   74:    for (size_t i = 0; i < 1000; ++i) {
        1:   74-block  0
     1001:   74-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
    1000*:   75:        EXPECT_TRUE(B.Contains(std::to_string(i)));
     1000:   75-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:   75-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:   75-block  2
call    6 returned 1000
call    7 returned 1000
call    8 returned 1000
branch  9 taken 0 (fallthrough)
branch 10 taken 1000
    %%%%%:   75-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:   75-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   75-block  5
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:   75-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:   75-block  7
call   24 never executed
call   25 never executed
call   26 never executed
     1000:   75-block  8
call   27 returned 1000
    $$$$$:   75-block  9
    $$$$$:   75-block 10
call   28 never executed
    $$$$$:   75-block 11
    $$$$$:   75-block 12
call   29 never executed
    $$$$$:   75-block 13
    $$$$$:   75-block 14
call   30 never executed
    $$$$$:   75-block 15
    $$$$$:   75-block 16
call   31 never executed
        -:   76:    }
        1:   77:}
------------------
        -:   78:
        4:   79:TEST(TestHashTable, MoveConstructor) {
        2:   80:    HashTable A;
      101:   81:    for (int i = 100; i > 0; --i) {
      200:   82:        std::string key = std::to_string(i);
      100:   83:        Value data;
      100:   84:        A.Insert(key, data);
        -:   85:    }
        2:   86:    HashTable B = A;
        2:   87:    HashTable C = std::move(B);
       1*:   88:    EXPECT_EQ(A, C);
        1:   89:}
------------------
_ZN34TestHashTable_MoveConstructor_TestC1Ev:
function _ZN34TestHashTable_MoveConstructor_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   79:TEST(TestHashTable, MoveConstructor) {
        1:   79-block  0
call    0 returned 1
------------------
_ZN34TestHashTable_MoveConstructor_TestD0Ev:
function _ZN34TestHashTable_MoveConstructor_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   79:TEST(TestHashTable, MoveConstructor) {
        1:   79-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN34TestHashTable_MoveConstructor_TestD1Ev:
function _ZN34TestHashTable_MoveConstructor_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   79:TEST(TestHashTable, MoveConstructor) {
        1:   79-block  0
call    0 returned 1
------------------
_ZN34TestHashTable_MoveConstructor_Test8TestBodyEv:
function _ZN34TestHashTable_MoveConstructor_Test8TestBodyEv called 1 returned 100% blocks executed 44%
        1:   79:TEST(TestHashTable, MoveConstructor) {
        2:   80:    HashTable A;
        1:   80-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   80-block  1
call    4 never executed
      101:   81:    for (int i = 100; i > 0; --i) {
        1:   81-block  0
      101:   81-block  1
branch  0 taken 100 (fallthrough)
branch  1 taken 1
      200:   82:        std::string key = std::to_string(i);
      100:   82-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:   82-block  1
call    3 returned 100
    $$$$$:   82-block  2
call    4 never executed
      100:   83:        Value data;
      100:   83-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:   84:        A.Insert(key, data);
      100:   84-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
        -:   85:    }
        2:   86:    HashTable B = A;
        1:   86-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   86-block  1
call    4 never executed
        2:   87:    HashTable C = std::move(B);
        1:   87-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:   87-block  1
call    3 never executed
       1*:   88:    EXPECT_EQ(A, C);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   88-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   88-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   88-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   88-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   88-block  4
call   16 never executed
call   17 never executed
        1:   88-block  5
call   18 returned 1
    $$$$$:   88-block  6
call   19 never executed
    $$$$$:   88-block  7
    $$$$$:   88-block  8
call   20 never executed
    $$$$$:   88-block  9
    $$$$$:   88-block 10
call   21 never executed
        1:   89:}
------------------
        -:   90:
        4:   91:TEST(TestHashTable, Swap) {
        2:   92:    HashTable A;
      101:   93:    for (int i = 100; i > 0; --i) {
      200:   94:        std::string key = std::to_string(i);
      100:   95:        Value data;
      100:   96:        A.Insert(key, data);
        -:   97:    }
        2:   98:    HashTable C = A;
        2:   99:    HashTable B;
      101:  100:    for (int i = 200; i > 100; --i) {
      200:  101:        std::string key = std::to_string(i);
      100:  102:        Value data;
      100:  103:        B.Insert(key, data);
        -:  104:    }
        2:  105:    HashTable D = B;
        1:  106:    A.Swap(B);
       1*:  107:    EXPECT_EQ(A, D);
       1*:  108:    EXPECT_EQ(B, C);
        1:  109:}
------------------
_ZN23TestHashTable_Swap_TestC1Ev:
function _ZN23TestHashTable_Swap_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   91:TEST(TestHashTable, Swap) {
        1:   91-block  0
call    0 returned 1
------------------
_ZN23TestHashTable_Swap_TestD0Ev:
function _ZN23TestHashTable_Swap_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   91:TEST(TestHashTable, Swap) {
        1:   91-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN23TestHashTable_Swap_TestD1Ev:
function _ZN23TestHashTable_Swap_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   91:TEST(TestHashTable, Swap) {
        1:   91-block  0
call    0 returned 1
------------------
_ZN23TestHashTable_Swap_Test8TestBodyEv:
function _ZN23TestHashTable_Swap_Test8TestBodyEv called 1 returned 100% blocks executed 42%
        1:   91:TEST(TestHashTable, Swap) {
        2:   92:    HashTable A;
        1:   92-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   92-block  1
call    4 never executed
      101:   93:    for (int i = 100; i > 0; --i) {
        1:   93-block  0
      101:   93-block  1
branch  0 taken 100 (fallthrough)
branch  1 taken 1
      200:   94:        std::string key = std::to_string(i);
      100:   94-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:   94-block  1
call    3 returned 100
    $$$$$:   94-block  2
call    4 never executed
      100:   95:        Value data;
      100:   95-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:   96:        A.Insert(key, data);
      100:   96-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
        -:   97:    }
        2:   98:    HashTable C = A;
        1:   98-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   98-block  1
call    4 never executed
        2:   99:    HashTable B;
        1:   99-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   99-block  1
call    4 never executed
      101:  100:    for (int i = 200; i > 100; --i) {
        1:  100-block  0
      101:  100-block  1
branch  0 taken 100 (fallthrough)
branch  1 taken 1
      200:  101:        std::string key = std::to_string(i);
      100:  101-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  101-block  1
call    3 returned 100
    $$$$$:  101-block  2
call    4 never executed
      100:  102:        Value data;
      100:  102-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  103:        B.Insert(key, data);
      100:  103-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
        -:  104:    }
        2:  105:    HashTable D = B;
        1:  105-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  105-block  1
call    4 never executed
        1:  106:    A.Swap(B);
        1:  106-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  107:    EXPECT_EQ(A, D);
        1:  107-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  107-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  107-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  107-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  107-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  107-block  5
call   16 never executed
call   17 never executed
        1:  107-block  6
call   18 returned 1
    $$$$$:  107-block  7
call   19 never executed
    $$$$$:  107-block  8
    $$$$$:  107-block  9
call   20 never executed
    $$$$$:  107-block 10
    $$$$$:  107-block 11
call   21 never executed
       1*:  108:    EXPECT_EQ(B, C);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  108-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  108-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  108-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  108-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  108-block  4
call   16 never executed
call   17 never executed
        1:  108-block  5
call   18 returned 1
    $$$$$:  108-block  6
call   19 never executed
    $$$$$:  108-block  7
    $$$$$:  108-block  8
call   20 never executed
    $$$$$:  108-block  9
    $$$$$:  108-block 10
call   21 never executed
        1:  109:}
------------------
        -:  110:
        4:  111:TEST(TestHashTable, OperatorSquareBrackets) {
        -:  112:
        2:  113:    HashTable A;
     1001:  114:    for (int i = 0; i < 1000; ++i) {
     1000:  115:        Value data(i, i);
     2000:  116:        std::string key = std::to_string(i);
     1000:  117:        A.Insert(key, data);
    2000*:  118:        EXPECT_EQ(A[std::to_string(i)], data);
        -:  119:    }
        -:  120:
        1:  121:    A.Clear();
     1001:  122:    for (int i = 1000; i > 0; --i) {
     1000:  123:        Value data(i, i);
     2000:  124:        std::string key = std::to_string(i);
     1000:  125:        A.Insert(key, data);
    2000*:  126:        EXPECT_EQ(A[std::to_string(i)], data);
        -:  127:    }
        -:  128:
        1:  129:    A.Clear();
     1001:  130:    for (int i = 1000; i > 0; --i) {
     2000:  131:        std::string key = std::to_string(i);
     1000:  132:        Value data;
    2000*:  133:        EXPECT_EQ(A[std::to_string(i)], data);
        -:  134:    }
        1:  135:}
------------------
_ZN41TestHashTable_OperatorSquareBrackets_TestC1Ev:
function _ZN41TestHashTable_OperatorSquareBrackets_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  111:TEST(TestHashTable, OperatorSquareBrackets) {
        1:  111-block  0
call    0 returned 1
------------------
_ZN41TestHashTable_OperatorSquareBrackets_TestD0Ev:
function _ZN41TestHashTable_OperatorSquareBrackets_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  111:TEST(TestHashTable, OperatorSquareBrackets) {
        1:  111-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN41TestHashTable_OperatorSquareBrackets_TestD1Ev:
function _ZN41TestHashTable_OperatorSquareBrackets_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  111:TEST(TestHashTable, OperatorSquareBrackets) {
        1:  111-block  0
call    0 returned 1
------------------
_ZN41TestHashTable_OperatorSquareBrackets_Test8TestBodyEv:
function _ZN41TestHashTable_OperatorSquareBrackets_Test8TestBodyEv called 1 returned 100% blocks executed 41%
        1:  111:TEST(TestHashTable, OperatorSquareBrackets) {
        -:  112:
        2:  113:    HashTable A;
        1:  113-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  113-block  1
call    3 returned 1
    $$$$$:  113-block  2
call    4 never executed
     1001:  114:    for (int i = 0; i < 1000; ++i) {
        1:  114-block  0
     1001:  114-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  115:        Value data(i, i);
     1000:  115-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  116:        std::string key = std::to_string(i);
     1000:  116-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  116-block  1
call    4 never executed
     1000:  117:        A.Insert(key, data);
     1000:  117-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
    2000*:  118:        EXPECT_EQ(A[std::to_string(i)], data);
     1000:  118-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  118-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  118-block  2
call    6 returned 1000
branch  7 taken 1000 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1000
branch 10 taken 0 (fallthrough)
branch 11 taken 1000
    %%%%%:  118-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  118-block  4
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  118-block  5
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:  118-block  6
call   22 never executed
call   23 never executed
     1000:  118-block  7
call   24 returned 1000
    $$$$$:  118-block  8
    $$$$$:  118-block  9
call   25 never executed
    $$$$$:  118-block 10
    $$$$$:  118-block 11
call   26 never executed
    $$$$$:  118-block 12
    $$$$$:  118-block 13
call   27 never executed
        -:  119:    }
        -:  120:
        1:  121:    A.Clear();
        1:  121-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
     1001:  122:    for (int i = 1000; i > 0; --i) {
        1:  122-block  0
     1001:  122-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  123:        Value data(i, i);
     1000:  123-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  124:        std::string key = std::to_string(i);
     1000:  124-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  124-block  1
call    4 never executed
     1000:  125:        A.Insert(key, data);
     1000:  125-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
    2000*:  126:        EXPECT_EQ(A[std::to_string(i)], data);
     1000:  126-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  126-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  126-block  2
call    6 returned 1000
branch  7 taken 1000 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1000
branch 10 taken 0 (fallthrough)
branch 11 taken 1000
    %%%%%:  126-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  126-block  4
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  126-block  5
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:  126-block  6
call   22 never executed
call   23 never executed
     1000:  126-block  7
call   24 returned 1000
    $$$$$:  126-block  8
    $$$$$:  126-block  9
call   25 never executed
    $$$$$:  126-block 10
    $$$$$:  126-block 11
call   26 never executed
    $$$$$:  126-block 12
    $$$$$:  126-block 13
call   27 never executed
        -:  127:    }
        -:  128:
        1:  129:    A.Clear();
        1:  129-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
     1001:  130:    for (int i = 1000; i > 0; --i) {
        1:  130-block  0
     1001:  130-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     2000:  131:        std::string key = std::to_string(i);
     1000:  131-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  131-block  1
call    4 never executed
     1000:  132:        Value data;
     1000:  132-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
    2000*:  133:        EXPECT_EQ(A[std::to_string(i)], data);
     1000:  133-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  133-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  133-block  2
call    6 returned 1000
branch  7 taken 1000 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1000
branch 10 taken 0 (fallthrough)
branch 11 taken 1000
    %%%%%:  133-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  133-block  4
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  133-block  5
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:  133-block  6
call   22 never executed
call   23 never executed
     1000:  133-block  7
call   24 returned 1000
    $$$$$:  133-block  8
    $$$$$:  133-block  9
call   25 never executed
    $$$$$:  133-block 10
    $$$$$:  133-block 11
call   26 never executed
    $$$$$:  133-block 12
    $$$$$:  133-block 13
call   27 never executed
        -:  134:    }
        1:  135:}
------------------
        4:  136:TEST(TestHashTable, Erase) {
        2:  137:    HashTable A;
        -:  138:
     1001:  139:    for (int i = 0; i < 1000; ++i) {
     1000:  140:        Value data(12, 38);
     1000:  141:        A.Insert(std::to_string(i), data);
        -:  142:    }
     1001:  143:    for(int i = 999; i >= 0; --i){
    1000*:  144:        EXPECT_TRUE(A.Erase(std::to_string(i)));
        -:  145:    }
       1*:  146:    EXPECT_FALSE(A.Erase("qwerty"));
        -:  147:
        2:  148:    HashTable C;
        1:  149:    Value data;
        1:  150:    C.Insert("alt+f3", data);
        1:  151:    C.Insert("alt+f4", data);
       1*:  152:    EXPECT_FALSE(C.Erase("qwerty3"));
       1*:  153:    EXPECT_FALSE(C.Erase("qwerty4"));
        1:  154:}
------------------
_ZN24TestHashTable_Erase_TestC1Ev:
function _ZN24TestHashTable_Erase_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  136:TEST(TestHashTable, Erase) {
        1:  136-block  0
call    0 returned 1
------------------
_ZN24TestHashTable_Erase_TestD0Ev:
function _ZN24TestHashTable_Erase_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  136:TEST(TestHashTable, Erase) {
        1:  136-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN24TestHashTable_Erase_TestD1Ev:
function _ZN24TestHashTable_Erase_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  136:TEST(TestHashTable, Erase) {
        1:  136-block  0
call    0 returned 1
------------------
_ZN24TestHashTable_Erase_Test8TestBodyEv:
function _ZN24TestHashTable_Erase_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:  136:TEST(TestHashTable, Erase) {
        2:  137:    HashTable A;
        1:  137-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  137-block  1
call    4 never executed
        -:  138:
     1001:  139:    for (int i = 0; i < 1000; ++i) {
        1:  139-block  0
     1001:  139-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  140:        Value data(12, 38);
     1000:  140-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  141:        A.Insert(std::to_string(i), data);
     1000:  141-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  141-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  141-block  2
call    6 returned 1000
    $$$$$:  141-block  3
call    7 never executed
    $$$$$:  141-block  4
        -:  142:    }
     1001:  143:    for(int i = 999; i >= 0; --i){
        1:  143-block  0
     1001:  143-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
    1000*:  144:        EXPECT_TRUE(A.Erase(std::to_string(i)));
     1000:  144-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  144-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  144-block  2
call    6 returned 1000
call    7 returned 1000
call    8 returned 1000
branch  9 taken 0 (fallthrough)
branch 10 taken 1000
    %%%%%:  144-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  144-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  144-block  5
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:  144-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  144-block  7
call   24 never executed
call   25 never executed
call   26 never executed
     1000:  144-block  8
call   27 returned 1000
    $$$$$:  144-block  9
    $$$$$:  144-block 10
call   28 never executed
    $$$$$:  144-block 11
    $$$$$:  144-block 12
call   29 never executed
    $$$$$:  144-block 13
    $$$$$:  144-block 14
call   30 never executed
    $$$$$:  144-block 15
    $$$$$:  144-block 16
call   31 never executed
        -:  145:    }
       1*:  146:    EXPECT_FALSE(A.Erase("qwerty"));
        1:  146-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  146-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  146-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
branch 11 taken 0 (fallthrough)
branch 12 taken 1
    %%%%%:  146-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  146-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  146-block  5
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%:  146-block  6
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%:  146-block  7
call   26 never executed
call   27 never executed
call   28 never executed
        1:  146-block  8
call   29 returned 1
    $$$$$:  146-block  9
    $$$$$:  146-block 10
    $$$$$:  146-block 11
call   30 never executed
    $$$$$:  146-block 12
    $$$$$:  146-block 13
call   31 never executed
    $$$$$:  146-block 14
    $$$$$:  146-block 15
call   32 never executed
    $$$$$:  146-block 16
    $$$$$:  146-block 17
call   33 never executed
        -:  147:
        2:  148:    HashTable C;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  148-block  0
call    4 never executed
        1:  149:    Value data;
        1:  149-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  150:    C.Insert("alt+f3", data);
        1:  150-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  150-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  150-block  2
call    7 returned 1
call    8 returned 1
    $$$$$:  150-block  3
call    9 never executed
    $$$$$:  150-block  4
    $$$$$:  150-block  5
call   10 never executed
    $$$$$:  150-block  6
        1:  151:    C.Insert("alt+f4", data);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  151-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  151-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:  151-block  2
call    9 never executed
    $$$$$:  151-block  3
    $$$$$:  151-block  4
call   10 never executed
    $$$$$:  151-block  5
       1*:  152:    EXPECT_FALSE(C.Erase("qwerty3"));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  152-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  152-block  1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
branch 11 taken 0 (fallthrough)
branch 12 taken 1
    %%%%%:  152-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  152-block  3
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  152-block  4
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%:  152-block  5
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%:  152-block  6
call   26 never executed
call   27 never executed
call   28 never executed
        1:  152-block  7
call   29 returned 1
    $$$$$:  152-block  8
    $$$$$:  152-block  9
    $$$$$:  152-block 10
call   30 never executed
    $$$$$:  152-block 11
    $$$$$:  152-block 12
call   31 never executed
    $$$$$:  152-block 13
    $$$$$:  152-block 14
call   32 never executed
    $$$$$:  152-block 15
    $$$$$:  152-block 16
call   33 never executed
       1*:  153:    EXPECT_FALSE(C.Erase("qwerty4"));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  153-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  153-block  1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
branch 11 taken 0 (fallthrough)
branch 12 taken 1
    %%%%%:  153-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  153-block  3
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  153-block  4
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%:  153-block  5
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%:  153-block  6
call   26 never executed
call   27 never executed
call   28 never executed
        1:  153-block  7
call   29 returned 1
    $$$$$:  153-block  8
    $$$$$:  153-block  9
    $$$$$:  153-block 10
call   30 never executed
    $$$$$:  153-block 11
    $$$$$:  153-block 12
call   31 never executed
    $$$$$:  153-block 13
    $$$$$:  153-block 14
call   32 never executed
    $$$$$:  153-block 15
    $$$$$:  153-block 16
call   33 never executed
        1:  154:}
------------------
        4:  155:TEST(TestHashTable, At) {
        -:  156:
        2:  157:    HashTable A;
     1001:  158:    for (int i = 0; i < 1000; ++i) {
     1000:  159:        Value data(i, i);
     2000:  160:        std::string key = std::to_string(i);
     1000:  161:        A.Insert(key, data);
    1000*:  162:        EXPECT_EQ(A.At(key), data);
        -:  163:    }
        -:  164:
     1001:  165:    for(size_t i = 1000; i < 2000; ++i){
     2000:  166:        std::string key = std::to_string(i);
    2000*:  167:        EXPECT_THROW(A.At(key), std::runtime_error);
        -:  168:    }
        -:  169:
        -:  170:
        2:  171:    const HashTable B = A;
     1001:  172:    for (int i = 0; i < 1000; ++i) {
     1000:  173:        Value data(i, i);
    2000*:  174:        EXPECT_EQ(B.At(std::to_string(i)), data);
        -:  175:    }
     1001:  176:    for(size_t i = 1000; i < 2000; ++i){
     2000:  177:        std::string key = std::to_string(i);
    2000*:  178:        EXPECT_THROW(B.At(key), std::runtime_error);
        -:  179:    }
        -:  180:
        1:  181:}
------------------
_ZN21TestHashTable_At_TestC1Ev:
function _ZN21TestHashTable_At_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  155:TEST(TestHashTable, At) {
        1:  155-block  0
call    0 returned 1
------------------
_ZN21TestHashTable_At_TestD0Ev:
function _ZN21TestHashTable_At_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  155:TEST(TestHashTable, At) {
        1:  155-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN21TestHashTable_At_TestD1Ev:
function _ZN21TestHashTable_At_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  155:TEST(TestHashTable, At) {
        1:  155-block  0
call    0 returned 1
------------------
_ZN21TestHashTable_At_Test8TestBodyEv:
function _ZN21TestHashTable_At_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:  155:TEST(TestHashTable, At) {
        -:  156:
        2:  157:    HashTable A;
        1:  157-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  157-block  1
call    4 never executed
     1001:  158:    for (int i = 0; i < 1000; ++i) {
        1:  158-block  0
     1001:  158-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  159:        Value data(i, i);
     1000:  159-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  160:        std::string key = std::to_string(i);
     1000:  160-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  160-block  1
call    4 never executed
     1000:  161:        A.Insert(key, data);
     1000:  161-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
    1000*:  162:        EXPECT_EQ(A.At(key), data);
     1000:  162-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  162-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  162-block  2
call    6 returned 1000
branch  7 taken 0 (fallthrough)
branch  8 taken 1000
    %%%%%:  162-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  162-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  162-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  162-block  6
call   19 never executed
call   20 never executed
     1000:  162-block  7
call   21 returned 1000
    $$$$$:  162-block  8
call   22 never executed
    $$$$$:  162-block  9
    $$$$$:  162-block 10
call   23 never executed
    $$$$$:  162-block 11
    $$$$$:  162-block 12
call   24 never executed
        -:  163:    }
        -:  164:
     1001:  165:    for(size_t i = 1000; i < 2000; ++i){
        1:  165-block  0
     1001:  165-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     2000:  166:        std::string key = std::to_string(i);
     1000:  166-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  166-block  1
call    4 never executed
    2000*:  167:        EXPECT_THROW(A.At(key), std::runtime_error);
     1000:  167-block  0
call    0 returned 1000
call    1 returned 1000
branch  2 taken 1000 (fallthrough)
branch  3 taken 0
     1000:  167-block  1
call    4 returned 1000
branch  5 taken 1000 (fallthrough)
branch  6 taken 0 (throw)
     1000:  167-block  2
branch  7 taken 1000 (fallthrough)
branch  8 taken 0
     1000:  167-block  3
call    9 returned 1000
branch 10 taken 0 (fallthrough)
branch 11 taken 1000 (throw)
     1000:  167-block  4
branch 12 taken 0 (fallthrough)
branch 13 taken 1000
    %%%%%:  167-block  5
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  167-block  6
    %%%%%:  167-block  7
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  167-block  8
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  167-block  9
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%:  167-block 10
call   27 never executed
call   28 never executed
     1000:  167-block 11
call   29 returned 1000
     1000:  167-block 12
call   30 returned 1000
call   31 returned 1000
    $$$$$:  167-block 13
call   32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
    $$$$$:  167-block 14
call   36 never executed
branch 37 never executed
branch 38 never executed
    $$$$$:  167-block 15
call   39 never executed
branch 40 never executed
branch 41 never executed
    $$$$$:  167-block 16
call   42 never executed
call   43 never executed
branch 44 never executed
branch 45 never executed
    $$$$$:  167-block 17
call   46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
    $$$$$:  167-block 18
call   50 never executed
branch 51 never executed
branch 52 never executed
    $$$$$:  167-block 19
call   53 never executed
    $$$$$:  167-block 20
call   54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
    $$$$$:  167-block 21
call   58 never executed
branch 59 never executed
branch 60 never executed
    $$$$$:  167-block 22
call   61 never executed
    $$$$$:  167-block 23
    $$$$$:  167-block 24
call   62 never executed
    $$$$$:  167-block 25
call   63 never executed
    $$$$$:  167-block 26
call   64 never executed
    $$$$$:  167-block 27
    $$$$$:  167-block 28
call   65 never executed
    $$$$$:  167-block 29
    $$$$$:  167-block 30
call   66 never executed
        -:  168:    }
        -:  169:
        -:  170:
        2:  171:    const HashTable B = A;
        1:  171-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  171-block  1
call    3 returned 1
    $$$$$:  171-block  2
call    4 never executed
     1001:  172:    for (int i = 0; i < 1000; ++i) {
        1:  172-block  0
     1001:  172-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  173:        Value data(i, i);
     1000:  173-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
    2000*:  174:        EXPECT_EQ(B.At(std::to_string(i)), data);
     1000:  174-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  174-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  174-block  2
call    6 returned 1000
branch  7 taken 1000 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1000
branch 10 taken 0 (fallthrough)
branch 11 taken 1000
    %%%%%:  174-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  174-block  4
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  174-block  5
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:  174-block  6
call   22 never executed
call   23 never executed
     1000:  174-block  7
call   24 returned 1000
    $$$$$:  174-block  8
    $$$$$:  174-block  9
call   25 never executed
    $$$$$:  174-block 10
    $$$$$:  174-block 11
call   26 never executed
    $$$$$:  174-block 12
    $$$$$:  174-block 13
call   27 never executed
        -:  175:    }
     1001:  176:    for(size_t i = 1000; i < 2000; ++i){
        1:  176-block  0
     1001:  176-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     2000:  177:        std::string key = std::to_string(i);
     1000:  177-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  177-block  1
call    4 never executed
    2000*:  178:        EXPECT_THROW(B.At(key), std::runtime_error);
     1000:  178-block  0
call    0 returned 1000
call    1 returned 1000
branch  2 taken 1000 (fallthrough)
branch  3 taken 0
     1000:  178-block  1
call    4 returned 1000
branch  5 taken 1000 (fallthrough)
branch  6 taken 0 (throw)
     1000:  178-block  2
branch  7 taken 1000 (fallthrough)
branch  8 taken 0
     1000:  178-block  3
call    9 returned 1000
branch 10 taken 0 (fallthrough)
branch 11 taken 1000 (throw)
     1000:  178-block  4
branch 12 taken 0 (fallthrough)
branch 13 taken 1000
    %%%%%:  178-block  5
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  178-block  6
    %%%%%:  178-block  7
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  178-block  8
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  178-block  9
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%:  178-block 10
call   27 never executed
call   28 never executed
     1000:  178-block 11
call   29 returned 1000
     1000:  178-block 12
call   30 returned 1000
call   31 returned 1000
    $$$$$:  178-block 13
call   32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
    $$$$$:  178-block 14
call   36 never executed
branch 37 never executed
branch 38 never executed
    $$$$$:  178-block 15
call   39 never executed
branch 40 never executed
branch 41 never executed
    $$$$$:  178-block 16
call   42 never executed
call   43 never executed
branch 44 never executed
branch 45 never executed
    $$$$$:  178-block 17
call   46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
    $$$$$:  178-block 18
call   50 never executed
branch 51 never executed
branch 52 never executed
    $$$$$:  178-block 19
call   53 never executed
    $$$$$:  178-block 20
call   54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
    $$$$$:  178-block 21
call   58 never executed
branch 59 never executed
branch 60 never executed
    $$$$$:  178-block 22
call   61 never executed
    $$$$$:  178-block 23
    $$$$$:  178-block 24
call   62 never executed
    $$$$$:  178-block 25
call   63 never executed
    $$$$$:  178-block 26
call   64 never executed
    $$$$$:  178-block 27
    $$$$$:  178-block 28
call   65 never executed
    $$$$$:  178-block 29
    $$$$$:  178-block 30
call   66 never executed
        -:  179:    }
        -:  180:
        1:  181:}
------------------
        4:  182:TEST(TestHashTable, Contains) {
        2:  183:    HashTable A;
     101*:  184:    for(int i = 0; i < 100; ++i) EXPECT_FALSE(A.Contains(std::to_string(i)));
        -:  185:
     1001:  186:    for (size_t i = 0; i < 1000; ++i) {
     1000:  187:        Value data;
     2000:  188:        std::string key = std::to_string(i);
     1000:  189:        A.Insert(key, data);
        -:  190:    }
     1001:  191:    for(int i = 999; i >= 0; --i) {
    1000*:  192:        EXPECT_TRUE(A.Contains(std::to_string(i)));
        -:  193:    }
        1:  194:}
------------------
_ZN27TestHashTable_Contains_TestC1Ev:
function _ZN27TestHashTable_Contains_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  182:TEST(TestHashTable, Contains) {
        1:  182-block  0
call    0 returned 1
------------------
_ZN27TestHashTable_Contains_TestD0Ev:
function _ZN27TestHashTable_Contains_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  182:TEST(TestHashTable, Contains) {
        1:  182-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN27TestHashTable_Contains_TestD1Ev:
function _ZN27TestHashTable_Contains_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  182:TEST(TestHashTable, Contains) {
        1:  182-block  0
call    0 returned 1
------------------
_ZN27TestHashTable_Contains_Test8TestBodyEv:
function _ZN27TestHashTable_Contains_Test8TestBodyEv called 1 returned 100% blocks executed 37%
        1:  182:TEST(TestHashTable, Contains) {
        2:  183:    HashTable A;
        1:  183-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  183-block  1
call    3 returned 1
    $$$$$:  183-block  2
call    4 never executed
     101*:  184:    for(int i = 0; i < 100; ++i) EXPECT_FALSE(A.Contains(std::to_string(i)));
        1:  184-block  0
      101:  184-block  1
branch  0 taken 100 (fallthrough)
branch  1 taken 1
      100:  184-block  2
call    2 returned 100
branch  3 taken 100 (fallthrough)
branch  4 taken 0 (throw)
      100:  184-block  3
call    5 returned 100
branch  6 taken 100 (fallthrough)
branch  7 taken 0 (throw)
      100:  184-block  4
call    8 returned 100
call    9 returned 100
call   10 returned 100
branch 11 taken 0 (fallthrough)
branch 12 taken 100
    %%%%%:  184-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  184-block  6
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  184-block  7
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%:  184-block  8
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%:  184-block  9
call   26 never executed
call   27 never executed
call   28 never executed
      100:  184-block 10
call   29 returned 100
    $$$$$:  184-block 11
    $$$$$:  184-block 12
call   30 never executed
    $$$$$:  184-block 13
    $$$$$:  184-block 14
call   31 never executed
    $$$$$:  184-block 15
    $$$$$:  184-block 16
call   32 never executed
    $$$$$:  184-block 17
    $$$$$:  184-block 18
call   33 never executed
        -:  185:
     1001:  186:    for (size_t i = 0; i < 1000; ++i) {
        1:  186-block  0
     1001:  186-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  187:        Value data;
     1000:  187-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  188:        std::string key = std::to_string(i);
     1000:  188-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  188-block  1
call    3 returned 1000
    $$$$$:  188-block  2
call    4 never executed
     1000:  189:        A.Insert(key, data);
     1000:  189-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
        -:  190:    }
     1001:  191:    for(int i = 999; i >= 0; --i) {
        1:  191-block  0
     1001:  191-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
    1000*:  192:        EXPECT_TRUE(A.Contains(std::to_string(i)));
     1000:  192-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  192-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  192-block  2
call    6 returned 1000
call    7 returned 1000
call    8 returned 1000
branch  9 taken 0 (fallthrough)
branch 10 taken 1000
    %%%%%:  192-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  192-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  192-block  5
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:  192-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  192-block  7
call   24 never executed
call   25 never executed
call   26 never executed
     1000:  192-block  8
call   27 returned 1000
    $$$$$:  192-block  9
    $$$$$:  192-block 10
call   28 never executed
    $$$$$:  192-block 11
    $$$$$:  192-block 12
call   29 never executed
    $$$$$:  192-block 13
    $$$$$:  192-block 14
call   30 never executed
    $$$$$:  192-block 15
    $$$$$:  192-block 16
call   31 never executed
        -:  193:    }
        1:  194:}
------------------
        -:  195:
        4:  196:TEST(TestHashTable, Empty_Size_Clear) {
        2:  197:    HashTable A;
     1001:  198:    for (size_t i = 0; i < 1000; ++i) {
     1000:  199:        Value data(i, i);
     2000:  200:        std::string key = std::to_string(i);
     1000:  201:        A.Insert(key, data);
        -:  202:    }
       1*:  203:    EXPECT_EQ(A.Size(), 1000);
        1:  204:    A.Clear();
       1*:  205:    EXPECT_EQ(A.Empty(), true);
       1*:  206:    EXPECT_EQ(A.Size(), 0);
        1:  207:}
------------------
_ZN35TestHashTable_Empty_Size_Clear_TestC1Ev:
function _ZN35TestHashTable_Empty_Size_Clear_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  196:TEST(TestHashTable, Empty_Size_Clear) {
        1:  196-block  0
call    0 returned 1
------------------
_ZN35TestHashTable_Empty_Size_Clear_TestD0Ev:
function _ZN35TestHashTable_Empty_Size_Clear_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  196:TEST(TestHashTable, Empty_Size_Clear) {
        1:  196-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN35TestHashTable_Empty_Size_Clear_TestD1Ev:
function _ZN35TestHashTable_Empty_Size_Clear_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  196:TEST(TestHashTable, Empty_Size_Clear) {
        1:  196-block  0
call    0 returned 1
------------------
_ZN35TestHashTable_Empty_Size_Clear_Test8TestBodyEv:
function _ZN35TestHashTable_Empty_Size_Clear_Test8TestBodyEv called 1 returned 100% blocks executed 29%
        1:  196:TEST(TestHashTable, Empty_Size_Clear) {
        2:  197:    HashTable A;
        1:  197-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  197-block  1
call    4 never executed
     1001:  198:    for (size_t i = 0; i < 1000; ++i) {
        1:  198-block  0
     1001:  198-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  199:        Value data(i, i);
     1000:  199-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  200:        std::string key = std::to_string(i);
     1000:  200-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  200-block  1
call    3 returned 1000
    $$$$$:  200-block  2
call    4 never executed
     1000:  201:        A.Insert(key, data);
     1000:  201-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
        -:  202:    }
       1*:  203:    EXPECT_EQ(A.Size(), 1000);
        1:  203-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  203-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  203-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  203-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  203-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  203-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  203-block  6
call   19 never executed
call   20 never executed
        1:  203-block  7
call   21 returned 1
    $$$$$:  203-block  8
    $$$$$:  203-block  9
    $$$$$:  203-block 10
call   22 never executed
    $$$$$:  203-block 11
    $$$$$:  203-block 12
call   23 never executed
    $$$$$:  203-block 13
    $$$$$:  203-block 14
call   24 never executed
        1:  204:    A.Clear();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  205:    EXPECT_EQ(A.Empty(), true);
        1:  205-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  205-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  205-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  205-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  205-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  205-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  205-block  6
call   19 never executed
call   20 never executed
        1:  205-block  7
call   21 returned 1
    $$$$$:  205-block  8
    $$$$$:  205-block  9
    $$$$$:  205-block 10
call   22 never executed
    $$$$$:  205-block 11
    $$$$$:  205-block 12
call   23 never executed
    $$$$$:  205-block 13
    $$$$$:  205-block 14
call   24 never executed
       1*:  206:    EXPECT_EQ(A.Size(), 0);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  206-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  206-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  206-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  206-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  206-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  206-block  5
call   19 never executed
call   20 never executed
        1:  206-block  6
call   21 returned 1
    $$$$$:  206-block  7
    $$$$$:  206-block  8
    $$$$$:  206-block  9
call   22 never executed
    $$$$$:  206-block 10
    $$$$$:  206-block 11
call   23 never executed
    $$$$$:  206-block 12
    $$$$$:  206-block 13
call   24 never executed
        1:  207:}
------------------
        -:  208:
        4:  209:TEST(TestHashTable, Equality) {
        2:  210:    HashTable A;
     1001:  211:    for (size_t i = 0; i < 1000; ++i) {
     1000:  212:        Value data;
     2000:  213:        std::string key = std::to_string(i);
    1000*:  214:        EXPECT_TRUE(A.Insert(key, data));
        -:  215:    }
        -:  216:
        2:  217:    HashTable B;
     2001:  218:    for (int i = 0; i < 2000; ++i) {
     2000:  219:        Value data;
     4000:  220:        std::string key = std::to_string(i);
    2000*:  221:        EXPECT_TRUE(B.Insert(key, data));
        -:  222:    }
     1001:  223:    for(int i = 1000; i < 2000; ++i) {
    1000*:  224:        EXPECT_TRUE(B.Erase(std::to_string(i)));
        -:  225:    }
        -:  226:
       1*:  227:    EXPECT_EQ(A == B, true);
        -:  228:
        1:  229:    A = A;
       1*:  230:    EXPECT_EQ(A == A, true);
        -:  231:
        1:  232:    Value Data;
        1:  233:    A.Insert("qwerty", Data);
       1*:  234:    EXPECT_EQ(A == B, false);
        -:  235:
        1:  236:    A.Erase("qwerty");
        1:  237:    A.Erase("0");
        1:  238:    A.Insert("UNIQUE_KEY", Data);
       1*:  239:    EXPECT_EQ(A == B, false);
        1:  240:}
------------------
_ZN27TestHashTable_Equality_TestC1Ev:
function _ZN27TestHashTable_Equality_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  209:TEST(TestHashTable, Equality) {
        1:  209-block  0
call    0 returned 1
------------------
_ZN27TestHashTable_Equality_TestD0Ev:
function _ZN27TestHashTable_Equality_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  209:TEST(TestHashTable, Equality) {
        1:  209-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN27TestHashTable_Equality_TestD1Ev:
function _ZN27TestHashTable_Equality_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  209:TEST(TestHashTable, Equality) {
        1:  209-block  0
call    0 returned 1
------------------
_ZN27TestHashTable_Equality_Test8TestBodyEv:
function _ZN27TestHashTable_Equality_Test8TestBodyEv called 1 returned 100% blocks executed 31%
        1:  209:TEST(TestHashTable, Equality) {
        2:  210:    HashTable A;
        1:  210-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  210-block  1
call    4 never executed
     1001:  211:    for (size_t i = 0; i < 1000; ++i) {
        1:  211-block  0
     1001:  211-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  212:        Value data;
     1000:  212-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  213:        std::string key = std::to_string(i);
     1000:  213-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  213-block  1
call    4 never executed
    1000*:  214:        EXPECT_TRUE(A.Insert(key, data));
     1000:  214-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  214-block  1
call    3 returned 1000
call    4 returned 1000
branch  5 taken 0 (fallthrough)
branch  6 taken 1000
    %%%%%:  214-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  214-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  214-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  214-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  214-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     1000:  214-block  7
call   23 returned 1000
    $$$$$:  214-block  8
call   24 never executed
    $$$$$:  214-block  9
    $$$$$:  214-block 10
call   25 never executed
    $$$$$:  214-block 11
    $$$$$:  214-block 12
call   26 never executed
    $$$$$:  214-block 13
    $$$$$:  214-block 14
call   27 never executed
        -:  215:    }
        -:  216:
        2:  217:    HashTable B;
        1:  217-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  217-block  1
call    4 never executed
     2001:  218:    for (int i = 0; i < 2000; ++i) {
        1:  218-block  0
     2001:  218-block  1
branch  0 taken 2000 (fallthrough)
branch  1 taken 1
     2000:  219:        Value data;
     2000:  219-block  0
call    0 returned 2000
branch  1 taken 2000 (fallthrough)
branch  2 taken 0 (throw)
     4000:  220:        std::string key = std::to_string(i);
     2000:  220-block  0
call    0 returned 2000
branch  1 taken 2000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2000
    $$$$$:  220-block  1
call    4 never executed
    2000*:  221:        EXPECT_TRUE(B.Insert(key, data));
     2000:  221-block  0
call    0 returned 2000
branch  1 taken 2000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  221-block  1
call    3 returned 2000
call    4 returned 2000
branch  5 taken 0 (fallthrough)
branch  6 taken 2000
    %%%%%:  221-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  221-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  221-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  221-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  221-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     2000:  221-block  7
call   23 returned 2000
    $$$$$:  221-block  8
call   24 never executed
    $$$$$:  221-block  9
    $$$$$:  221-block 10
call   25 never executed
    $$$$$:  221-block 11
    $$$$$:  221-block 12
call   26 never executed
    $$$$$:  221-block 13
    $$$$$:  221-block 14
call   27 never executed
        -:  222:    }
     1001:  223:    for(int i = 1000; i < 2000; ++i) {
        1:  223-block  0
     1001:  223-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
    1000*:  224:        EXPECT_TRUE(B.Erase(std::to_string(i)));
     1000:  224-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  224-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  224-block  2
call    6 returned 1000
call    7 returned 1000
call    8 returned 1000
branch  9 taken 0 (fallthrough)
branch 10 taken 1000
    %%%%%:  224-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  224-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  224-block  5
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:  224-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  224-block  7
call   24 never executed
call   25 never executed
call   26 never executed
     1000:  224-block  8
call   27 returned 1000
    $$$$$:  224-block  9
    $$$$$:  224-block 10
call   28 never executed
    $$$$$:  224-block 11
    $$$$$:  224-block 12
call   29 never executed
    $$$$$:  224-block 13
    $$$$$:  224-block 14
call   30 never executed
    $$$$$:  224-block 15
    $$$$$:  224-block 16
call   31 never executed
        -:  225:    }
        -:  226:
       1*:  227:    EXPECT_EQ(A == B, true);
        1:  227-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  227-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  227-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  227-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  227-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  227-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  227-block  6
call   19 never executed
call   20 never executed
        1:  227-block  7
call   21 returned 1
    $$$$$:  227-block  8
    $$$$$:  227-block  9
    $$$$$:  227-block 10
call   22 never executed
    $$$$$:  227-block 11
    $$$$$:  227-block 12
call   23 never executed
    $$$$$:  227-block 13
    $$$$$:  227-block 14
call   24 never executed
        -:  228:
        1:  229:    A = A;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  230:    EXPECT_EQ(A == A, true);
        1:  230-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  230-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  230-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  230-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  230-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  230-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  230-block  6
call   19 never executed
call   20 never executed
        1:  230-block  7
call   21 returned 1
    $$$$$:  230-block  8
    $$$$$:  230-block  9
    $$$$$:  230-block 10
call   22 never executed
    $$$$$:  230-block 11
    $$$$$:  230-block 12
call   23 never executed
    $$$$$:  230-block 13
    $$$$$:  230-block 14
call   24 never executed
        -:  231:
        1:  232:    Value Data;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  233:    A.Insert("qwerty", Data);
        1:  233-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  233-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  233-block  2
call    7 returned 1
call    8 returned 1
    $$$$$:  233-block  3
call    9 never executed
    $$$$$:  233-block  4
    $$$$$:  233-block  5
call   10 never executed
    $$$$$:  233-block  6
       1*:  234:    EXPECT_EQ(A == B, false);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  234-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  234-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  234-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  234-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  234-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  234-block  5
call   19 never executed
call   20 never executed
        1:  234-block  6
call   21 returned 1
    $$$$$:  234-block  7
    $$$$$:  234-block  8
    $$$$$:  234-block  9
call   22 never executed
    $$$$$:  234-block 10
    $$$$$:  234-block 11
call   23 never executed
    $$$$$:  234-block 12
    $$$$$:  234-block 13
call   24 never executed
        -:  235:
        1:  236:    A.Erase("qwerty");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  236-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  236-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:  236-block  2
call    9 never executed
    $$$$$:  236-block  3
    $$$$$:  236-block  4
call   10 never executed
    $$$$$:  236-block  5
        1:  237:    A.Erase("0");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  237-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  237-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:  237-block  2
call    9 never executed
    $$$$$:  237-block  3
    $$$$$:  237-block  4
call   10 never executed
    $$$$$:  237-block  5
        1:  238:    A.Insert("UNIQUE_KEY", Data);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  238-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  238-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:  238-block  2
call    9 never executed
    $$$$$:  238-block  3
    $$$$$:  238-block  4
call   10 never executed
    $$$$$:  238-block  5
       1*:  239:    EXPECT_EQ(A == B, false);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  239-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  239-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  239-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  239-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  239-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  239-block  5
call   19 never executed
call   20 never executed
        1:  239-block  6
call   21 returned 1
    $$$$$:  239-block  7
    $$$$$:  239-block  8
    $$$$$:  239-block  9
call   22 never executed
    $$$$$:  239-block 10
    $$$$$:  239-block 11
call   23 never executed
    $$$$$:  239-block 12
    $$$$$:  239-block 13
call   24 never executed
        1:  240:}
------------------
        -:  241:
        4:  242:TEST(TestHashTable, Inequality) {
        2:  243:    HashTable A;
     1001:  244:    for (size_t i = 0; i < 1000; ++i) {
     1000:  245:        Value data;
     2000:  246:        std::string key = std::to_string(i);
    1000*:  247:        EXPECT_TRUE(A.Insert(key, data));
        -:  248:    }
        -:  249:
        2:  250:    HashTable B;
     2001:  251:    for (int i = 0; i < 2000; ++i) {
     2000:  252:        Value data;
     4000:  253:        std::string key = std::to_string(i);
    2000*:  254:        EXPECT_TRUE(B.Insert(key, data));
        -:  255:    }
     1001:  256:    for(int i = 1000; i < 2000; ++i) {
    1000*:  257:        EXPECT_TRUE(B.Erase(std::to_string(i)));
        -:  258:    }
        -:  259:
       1*:  260:    EXPECT_EQ(A != B, false);
        1:  261:}
------------------
_ZN29TestHashTable_Inequality_TestC1Ev:
function _ZN29TestHashTable_Inequality_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  242:TEST(TestHashTable, Inequality) {
        1:  242-block  0
call    0 returned 1
------------------
_ZN29TestHashTable_Inequality_TestD0Ev:
function _ZN29TestHashTable_Inequality_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  242:TEST(TestHashTable, Inequality) {
        1:  242-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN29TestHashTable_Inequality_TestD1Ev:
function _ZN29TestHashTable_Inequality_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  242:TEST(TestHashTable, Inequality) {
        1:  242-block  0
call    0 returned 1
------------------
_ZN29TestHashTable_Inequality_Test8TestBodyEv:
function _ZN29TestHashTable_Inequality_Test8TestBodyEv called 1 returned 100% blocks executed 31%
        1:  242:TEST(TestHashTable, Inequality) {
        2:  243:    HashTable A;
        1:  243-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  243-block  1
call    4 never executed
     1001:  244:    for (size_t i = 0; i < 1000; ++i) {
        1:  244-block  0
     1001:  244-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  245:        Value data;
     1000:  245-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  246:        std::string key = std::to_string(i);
     1000:  246-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  246-block  1
call    4 never executed
    1000*:  247:        EXPECT_TRUE(A.Insert(key, data));
     1000:  247-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  247-block  1
call    3 returned 1000
call    4 returned 1000
branch  5 taken 0 (fallthrough)
branch  6 taken 1000
    %%%%%:  247-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  247-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  247-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  247-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  247-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     1000:  247-block  7
call   23 returned 1000
    $$$$$:  247-block  8
call   24 never executed
    $$$$$:  247-block  9
    $$$$$:  247-block 10
call   25 never executed
    $$$$$:  247-block 11
    $$$$$:  247-block 12
call   26 never executed
    $$$$$:  247-block 13
    $$$$$:  247-block 14
call   27 never executed
        -:  248:    }
        -:  249:
        2:  250:    HashTable B;
        1:  250-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  250-block  1
call    4 never executed
     2001:  251:    for (int i = 0; i < 2000; ++i) {
        1:  251-block  0
     2001:  251-block  1
branch  0 taken 2000 (fallthrough)
branch  1 taken 1
     2000:  252:        Value data;
     2000:  252-block  0
call    0 returned 2000
branch  1 taken 2000 (fallthrough)
branch  2 taken 0 (throw)
     4000:  253:        std::string key = std::to_string(i);
     2000:  253-block  0
call    0 returned 2000
branch  1 taken 2000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2000
    $$$$$:  253-block  1
call    4 never executed
    2000*:  254:        EXPECT_TRUE(B.Insert(key, data));
     2000:  254-block  0
call    0 returned 2000
branch  1 taken 2000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  254-block  1
call    3 returned 2000
call    4 returned 2000
branch  5 taken 0 (fallthrough)
branch  6 taken 2000
    %%%%%:  254-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  254-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  254-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  254-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  254-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     2000:  254-block  7
call   23 returned 2000
    $$$$$:  254-block  8
call   24 never executed
    $$$$$:  254-block  9
    $$$$$:  254-block 10
call   25 never executed
    $$$$$:  254-block 11
    $$$$$:  254-block 12
call   26 never executed
    $$$$$:  254-block 13
    $$$$$:  254-block 14
call   27 never executed
        -:  255:    }
     1001:  256:    for(int i = 1000; i < 2000; ++i) {
        1:  256-block  0
     1001:  256-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
    1000*:  257:        EXPECT_TRUE(B.Erase(std::to_string(i)));
     1000:  257-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  257-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  257-block  2
call    6 returned 1000
call    7 returned 1000
call    8 returned 1000
branch  9 taken 0 (fallthrough)
branch 10 taken 1000
    %%%%%:  257-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  257-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  257-block  5
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:  257-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  257-block  7
call   24 never executed
call   25 never executed
call   26 never executed
     1000:  257-block  8
call   27 returned 1000
    $$$$$:  257-block  9
    $$$$$:  257-block 10
call   28 never executed
    $$$$$:  257-block 11
    $$$$$:  257-block 12
call   29 never executed
    $$$$$:  257-block 13
    $$$$$:  257-block 14
call   30 never executed
    $$$$$:  257-block 15
    $$$$$:  257-block 16
call   31 never executed
        -:  258:    }
        -:  259:
       1*:  260:    EXPECT_EQ(A != B, false);
        1:  260-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  260-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  260-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  260-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  260-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  260-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  260-block  6
call   19 never executed
call   20 never executed
        1:  260-block  7
call   21 returned 1
    $$$$$:  260-block  8
    $$$$$:  260-block  9
    $$$$$:  260-block 10
call   22 never executed
    $$$$$:  260-block 11
    $$$$$:  260-block 12
call   23 never executed
    $$$$$:  260-block 13
    $$$$$:  260-block 14
call   24 never executed
        1:  261:}
------------------
function main called 1 returned 100% blocks executed 100%
        1:  262:int main() {
        1:  263:    testing::InitGoogleTest();
        1:  263-block  0
call    0 returned 1
        1:  264:    return RUN_ALL_TESTS();
call    0 returned 1
        -:  265:}
